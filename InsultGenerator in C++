//Necessary libraries
#include <iostream>
#include <sstream>
#include <fstream>
#include <vector>
#include <set>
#include <iterator>
#include <time.h>
#include "insultgenerator_20alw6.h"
using namespace std;

//Initializes insults from the input file
void InsultGenerator::initialize() {
	ifstream insultsFile("InsultsSource.txt");

	if (!insultsFile.is_open()) {
		throw FileException("File could not be read. Please try again.");
	}

	//Strings to store insults from input file before pushing them to vector
	string one;
	string two;
	string three;
	string currentLine;

	while ( getline(insultsFile, currentLine, '\n') ) {	//Loops while the input file loads a line into currentLine
		stringstream cline(currentLine);	//Stringstream with insults from inout file
		cline >> one >> two >> three;	//Load words from cline into string one then two then three
		first.push_back(one);	//Push strings to vector strings
		second.push_back(two);
		third.push_back(three);
	}
}

string InsultGenerator::talkToMe() {	//Generates an insult by randomly selecting an insult from the vector strings
	return "Thou " + first[rand() % first.size()] + " " + second[rand() % second.size()] + " " + third[rand() % third.size()] + "!";
}

vector <string> InsultGenerator::generate(int num) {
	if (num > 10000 || num<1) {		//If the number is out of bounds throw exception
			throw NumInsultsOutOfBounds("Requested number is out of specified range, select a number from 1 to 10,000.");
		}

	vector<string> total;
	set<string> mySet;
	string insult;
	srand(time(0)); //makes it so that rand in talkToMe doesn't give the same value each time you run the program
	for (int i = 0; i < num; i++) { //Loop for number of insults requested
		insult = talkToMe();
		auto result = mySet.insert(insult);	//Check if "insult" was already in set
		while (!result.second) {	//If "insult" is unique, add to set
			insult = talkToMe();
			result = mySet.insert(insult);
		}
	}
	total.assign(mySet.begin(), mySet.end()); //Put mySet into total insults vector string
	return total;
}

void InsultGenerator::generateAndSave(const string& fileName, const int& numInsults) {	//Saves generated insults to save file
	vector<string> total = generate(numInsults);
	ofstream InsultsOut(fileName);
	if (!InsultsOut.is_open()) {	//Throw exception if cannot open output file
		throw FileException("File could not be opened.");
	}
	for (int i = 0; i<total.size(); i++) {	//Print out each insult one by one
			InsultsOut << total[i] << endl;
		}
}

FileException::FileException(string exception) : exception(exception) {}	//Exception for when you can't open file
string&  FileException::what() {
    return exception;
}

NumInsultsOutOfBounds::NumInsultsOutOfBounds(string exception) : exception(exception) {}	//Exception for when requested number is out of bounds
string& NumInsultsOutOfBounds::what() {
    return exception;
}

int main() {

	InsultGenerator ig;
	vector<string> insults;
	clock_t start=0, finish=0;

	// The initialize() method should load all the source phrases from the InsultsSource.txt file into the attributes.
	// If the file cannot be read, the method should throw an exception.
	try {
		ig.initialize();
	} catch (FileException& e) {
		cerr << e.what() << endl;
		return 1;
	}

	// talkToMe() returns a single insult, generated at random.
	cout << "A single insult:" << endl;
	cout << ig.talkToMe() << endl;

	// Check number to generate limits.
	try {
		insults = ig.generate(-100);
	} catch (NumInsultsOutOfBounds& e) {
		cerr << e.what() << endl;
	}
	try {
		insults = ig.generate(40000);
	} catch (NumInsultsOutOfBounds& e) {
		cerr << e.what() << endl;
	}

	// generate() generates the requested number of unique insults.
	cout << "\n100 insults, all different:" << endl;
	insults = ig.generate(100);
	if (insults.size() > 0)
		for (int i = 0; i < 100; i++)
			cout << insults[i] << endl;
	else
		cerr << "Insults could not be generated!" << endl;

	// generateAndSave() generates the requested number of unique insults and saves them to the filename
	// supplied.  If the file cannot be written, the method should throw an exception.  Note that the
	// insults in the file should be in alphabetical order!
	// Check the number to generate limits first:
	try {
		ig.generateAndSave("Nothing.txt", 40000);
	} catch (NumInsultsOutOfBounds& e) {
		cerr << e.what() << endl;
	}
	cout << "\nSaving 1000 unique insults to a file...";
	try {
		ig.generateAndSave("SavedInsults.txt", 1000);
	} catch (FileException& e) {
		cerr << e.what() << endl;
		return 1;
	}
	cout << "done." << endl;

	// Test ability to generate the maximum number of insults and how long it takes.
	try {
		start = clock();
		insults = ig.generate(10000);
		finish = clock();
	} catch (NumInsultsOutOfBounds& e) {
		cerr << e.what() << endl;
	}
	cout << "\n" << insults.size() << " insults generated." << endl;
	cout << (1e3 * (finish - start)/CLOCKS_PER_SEC) << " msec to complete." << endl;

	return 0;

} // end main
